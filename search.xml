<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OSCPStudy-HTB-Lame</title>
      <link href="/2024/03/31/HTB-Lame/"/>
      <url>/2024/03/31/HTB-Lame/</url>
      
        <content type="html"><![CDATA[<p>目标IP地址10.10.10.3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">21/tcp   open  ftp         vsftpd 2.3.4</span><br><span class="line">22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)</span><br><span class="line">139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))</span><br></pre></td></tr></table></figure><p>先试一下ftp能不能匿名登录，能匿名登录但是服务器下面没有文件</p><p>samba此版本下存在一个CVE-2007-2447漏洞，找到利用脚本，然后拿到一个shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/amriunix/CVE-2007-2447</span><br></pre></td></tr></table></figure><p>竟然直接就是root</p><p><a href="https://smms.app/image/V5trOUGCdlBQj9s" target="_blank"><img src="https://s2.loli.net/2024/03/31/V5trOUGCdlBQj9s.png" ></a></p><p>拿到root flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0dxxx</span><br></pre></td></tr></table></figure><p>在home目录下找到普通用户的flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">75xxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> OSCPStudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2023总结</title>
      <link href="/2024/03/31/%E6%88%91%E7%9A%842023%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/31/%E6%88%91%E7%9A%842023%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>想等到security的认证考过了再总结一下吧，现在既然认证已经拿到了，就大概絮叨絮叨，2023年大概是我至今以来目前精神内耗最严重的一年，先是年初跟领导提了想调动，然后被拿捏着去无锡代职，毕竟有了诉求，那就不好跟领导提不想去代职，一呆就是半年，那半年真是卷到起飞，工作日加四天班，周六还得加一天班，没有加班费的那种。无锡那个单位的各方面条件也很差，我住在一楼，宿舍是上世纪九十年代的那种老房子，潮湿不堪，两个人挤在一个十多平的小屋里，窗外的空调噪声巨大，经常大半夜弄的睡不着觉。那段时间被整的很焦虑，一边是调动的事迟迟悬而未决，一边是日复一日的加班，感觉自己就像拉磨的骡子，被吊在眼前的胡萝卜牵着走，躁郁的时候，自己就写写字，也算是把荒废了近十年的一点唯一勉强能称之为特长的手艺给捡了起来，“以后离职了说不定能去兼职带个书法班啥的”当时的我这样自嘲道。</p><p>四月去的无锡，十月才返回北京，然后国庆参加了我最好兄弟的婚礼，感觉一晃十多年过去了，看着别人都成家立业了，自己还是孤身一人飘零如风中柳絮，要说心里没有落差那是不可能的。国庆回去的时候，发现曾经的初中已经搬迁了，旧址被政府计划成一个景点，我心中不以为然，再次重履旧地，锈迹斑斑的篮球架、半米高的杂草、空无一人的凌乱教室，我看着十三年前的那个座位，午后的阳光透过窗户洒在斑驳的墙上，就想起金庸的一句词“红颜弹指老，刹那芳华”，人无法同时拥有青春和对青春的感受，此言不虚，有些东西是再也无法回来了。</p><p>回北京以后，领导提出来想让我去机关干一段时间，有个哥们转岗了，让我顶几个月，并告诉我单位马上要调整了，看能不能找机会把我调动的事解决了，我掂量了掂量既然已经是骑虎难下，那就干吧，投桃报李，想让领导报李，自己不交个投名状哪行呢。于是是焦头烂额地忙到了春节，那段时间基本上技术算是半荒废状态，加班基本上是连轴转，每周要写六份汇报，我跟同事调侃“用形式主义反对形式主义，每周不是在写报告就是在准备素材写报告”。</p><p>春节后，单位调整了，原来的那位领导调走了，走之前他说“调动的事给你联系过了，但是那边的单位说暂时没位置，再等等吧”，经过几个月行政口的经验，这话的弦外之音的意思就是基本上这事以他的层面他算是管不了了。原先年前自己也提前跟用人单位接触过，当时那里表示问题不大，结果年后我再联系的时候，得到的答复也是再等等，因为如果一件事，是真的想帮你办的话，哪怕短时间内办不了，也会说“先等等，下次有个什么什么机会，你关注一下”，而不是只说“再等等”。</p><p>春节休假结束之后，跟新领导提出来想回去干业务，批准了。有那么几天状态很差，毕竟是翘首以盼了一年的调动，最后黄了，要说一点失落没有那是不可能的，但是生活里理想丰满美好、现实一地鸡毛的事情多了去了，自己也只能选择接受或者被迫接受，人有时候得和自己和解。</p><p>回归技术工作之后也是逐渐把手艺拾起来了，其实做网络安全行业的，我也大可不必指着别人赏饭吃，做技术就把技术做好，国际通用的行业，到哪我也饿不着。陆续拿了2个CVE和一些CNVD，并不是拿这些漏洞编号有啥用，个人感觉自己已经过了刷编号的阶段了，只是纯粹检验一下技术还没有完全荒废。</p><p>3月底顺利通过security+的认证，开始准备今年最大的目标，OSCP国际渗透测试专家认证，这也是今年的第二个目标，等这个结了就准备考驾照，大概24年的规划就这三个证书，如果时间充裕，初步计划把OSEP也纳入日程。</p><p>最后，我引用《死亡诗社》里的一句台词，“梭罗曾说’多数人都生活在平静的绝望中，不要逆来顺受，要破茧而出’”，“虽然医药、法律、商业、工程，都是高尚的人生目标，但追求诗意与美、浪漫与爱，却是我们活着的意义”。</p><p>以上。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个月时间通过ComptiaSecurity+认证的经验</title>
      <link href="/2024/03/31/%E4%B8%80%E4%B8%AA%E6%9C%88%E6%97%B6%E9%97%B4%E9%80%9A%E8%BF%87ComptiaSecurity-%E8%AE%A4%E8%AF%81%E7%9A%84%E7%BB%8F%E9%AA%8C/"/>
      <url>/2024/03/31/%E4%B8%80%E4%B8%AA%E6%9C%88%E6%97%B6%E9%97%B4%E9%80%9A%E8%BF%87ComptiaSecurity-%E8%AE%A4%E8%AF%81%E7%9A%84%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>从备考到过年到拿证，除去过年的那几天摸鱼和年前工作事情比较多之外，大概就不到一个月时间吧，总的来说考试内容比较基础，就那几块知识，加上自己有相关从业经验，所以备考并不难。</p><p>因为懒得把时间花费在研究怎么报名上，我是直接报的培训课程，因为直播课要等到五月，我就直接刷的题库，着急拿证，毕竟今年计划的重点不在security+证书上，而是后面的OSCP。</p><h1 id="学习的目标"><a href="#学习的目标" class="headerlink" title="学习的目标"></a>学习的目标</h1><p>学习的重点，不用听课程的视频部分，讲那些枯燥的概念，拿证就是要以拿证为导向去学习，直接做题库就行了，可能该方法适合我这种有一些信息安全从业经验的人，小白还是可以听一下的，一共题库900多道题，共21块知识点，涵盖应用程序安全、应急响应、无线安全等安全的大方向，题目偏理解和应用多，网络攻击方法识别那一块的题目我直接略过了，因为本身就是做网络攻击的，所以减轻了一些负担。</p><h1 id="以通过考试为导向去学习"><a href="#以通过考试为导向去学习" class="headerlink" title="以通过考试为导向去学习"></a>以通过考试为导向去学习</h1><p>学习security+，就是以题目为导向，有基础的直接做题就行了，不懂的就Google，不会把概念考的很细，只需要知道这个产品比如RADIUS、RAID、control types，这些都有哪些内容，用于什么现实场景，就可以了，我举几个例子。</p><p>RADIUS，这个在security+里，就是和无线网络的WPA2-enterprise、AAA、Active Directory紧密联系在一起的，一般看到题目里有类似的直接选就行了。</p><p>应用程序白名单，给出的场景里提到用户是通过install、run等方式启动恶意软件的，就选白名单，这个时候答案里有whitelist，必选。</p><p>captive portal，强制门户，可以起到认证用户（authentication）的功能，一般给出的场景里有网络访问的解决方案的时候，答案里有captive portal必选，只有一个例外，使用PKI对设备进行验证，选802.1x。</p><p>如此方法，多总结，就不断地把题库刷明白，做到一眼看到答案就知道要选什么，甚至不用去看题目就知道。</p><p>还有一个tip，就是实在搞不懂这里为什么选该选项的时候，就背下来，比如我这里有个选项不理解，选择用更好的决策点更新剧本（Updating the playbooks with better decision points），我就记住有playbook的必选就行了，因为题库的答案里有playbook这个单词的并不多。</p><h1 id="一定要看英文原题"><a href="#一定要看英文原题" class="headerlink" title="一定要看英文原题"></a>一定要看英文原题</h1><p>考试是全英文的，正式考试之前一定要抛开中文翻译把题目全部过一遍，常见的词汇和关键词汇要牢记，compromised、tenure等等，比如tenure，是任期的意思，有个题目就是怎么调查基于任期的网络犯罪，选mandatory vacation，要是不知道tenure的意思，那就没法做。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>考试一共82道题，满分900分，750分通过，我考了800分，一个半小时考试时间，我基本上30分钟就把题目做完了，除了两三道题不在题库里，其他的全都是很熟练的题目，看到答案直接选的那种，上午9点多考完，晚上就收到了确认邮件，第二天拿到了证书。</p><p>成绩单</p><p><a href="https://smms.app/image/xqc4ydtTbYoViKO" target="_blank"><img src="https://s2.loli.net/2024/03/31/xqc4ydtTbYoViKO.jpg" ></a></p><p>考试通过邮件</p><p><a href="https://smms.app/image/KCgx2ZoJ9NpPt6B" target="_blank"><img src="https://s2.loli.net/2024/03/31/KCgx2ZoJ9NpPt6B.png" ></a></p><p>证书</p><p><a href="https://smms.app/image/tR8axv5NQFwYMp6" target="_blank"><img src="https://s2.loli.net/2024/03/31/tR8axv5NQFwYMp6.png" ></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWebDevelopmentLearningNote</title>
      <link href="/2024/03/30/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/30/JavaWeb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb中处理请求参数的方法"><a href="#JavaWeb中处理请求参数的方法" class="headerlink" title="JavaWeb中处理请求参数的方法"></a>JavaWeb中处理请求参数的方法</h1><h2 id="处理简单参数"><a href="#处理简单参数" class="headerlink" title="处理简单参数"></a>处理简单参数</h2><h3 id="简单参数方法"><a href="#简单参数方法" class="headerlink" title="简单参数方法"></a>简单参数方法</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在原始的web程序中，获取请求参数，需要通过HttpServletRequest 对象手动获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定请求路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//参数1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);<span class="comment">//参数2</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);</span><br><span class="line">    System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>利用SpringBoot方式</p><p>如果参数名与形参变量名相同，定义形参即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age)</span>&#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方式需要传入的参数名和形参名一致</p><p>如果方法形参名称与请求参数名称不匹配，可以使用 @RequestParam 完成映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="comment">//将name参数映射到username形参中</span></span><br><span class="line"><span class="comment">// @RequestParam中的required属性默认为true，代表该请求参数必须传递，如果不传递将报错。 如果该参数是可选的，可以将required属性设置为false，下面这个demo就是name必须传递，不传递就报错</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;)</span> String username , Integer age)</span>&#123;</span><br><span class="line">System.out.println(username + <span class="string">&quot; : &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体参数方法"><a href="#实体参数方法" class="headerlink" title="实体参数方法"></a>实体参数方法</h3><p>简单参数方法，使用几个参数就要写几个形参。</p><p>简单实体对象：请求参数名与形参对象属性名相同，定义POJO接收即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以嵌套</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理多个同名参数"><a href="#处理多个同名参数" class="headerlink" title="处理多个同名参数"></a>处理多个同名参数</h2><p>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</p><p>如果请求为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xx.xx.xx/listParam?hobby=Q&amp;hobby=W&amp;hobby=E</span><br></pre></td></tr></table></figure><p>可以使用数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;    </span><br><span class="line">System.out.println(Arrays.toString(hobby));    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用泛型集合，使用@RequestParam 绑定参数关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;    </span><br><span class="line">System.out.println(hobby);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理日期参数"><a href="#处理日期参数" class="headerlink" title="处理日期参数"></a>处理日期参数</h2><p>日期参数：使用 @DateTimeFormat 注解完成日期参数格式转换</p><p>如果请求为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xx.xx.xx/dateParam?updateTime=2010-09-30 15:20:13</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;    </span><br><span class="line">System.out.println(updateTime);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理JSON参数"><a href="#处理JSON参数" class="headerlink" title="处理JSON参数"></a>处理JSON参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>,</span><br><span class="line"><span class="string">&quot;age&quot;</span>:<span class="number">10</span>,</span><br><span class="line"><span class="string">&quot;address&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;province&quot;</span>:<span class="string">&quot;JP&quot;</span>,</span><br><span class="line"><span class="string">&quot;city&quot;</span>:<span class="string">&quot;Hokkaido&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;    </span><br><span class="line">System.out.println(user);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;    </span><br><span class="line"><span class="keyword">private</span> String name;    </span><br><span class="line"><span class="keyword">private</span> Integer age;   </span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理路径参数"><a href="#处理路径参数" class="headerlink" title="处理路径参数"></a>处理路径参数</h2><p>请求如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/path/1</span><br></pre></td></tr></table></figure><p>通过请求URL直接传递参数，使用{…}来标识该路径参数，需要使用 @PathVariable 获取路径参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;    </span><br><span class="line">System.out.println(id);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果请求为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8080/path/1/Tom</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JavaWeb中的响应"><a href="#JavaWeb中的响应" class="headerlink" title="JavaWeb中的响应"></a>JavaWeb中的响应</h1><h1 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类型：方法注解、类注解</span><br><span class="line"></span><br><span class="line">位置：Controller方法上/类上</span><br><span class="line"></span><br><span class="line">作用：将方法返回值直接响应，如果返回值类型是 实体对象/集合 ，将会转换为JSON格式响应</span><br><span class="line"></span><br><span class="line">说明：@RestController = @Controller + @ResponseBody ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//控制器1</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;    </span><br><span class="line">System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);    </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">Hello World ~</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器2</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;province&quot;</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">    <span class="string">&quot;city&quot;</span>: <span class="string">&quot;深圳&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制器3</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">    addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">    addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">    addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    list.add(addr);</span><br><span class="line">    list.add(addr2);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回</span></span><br><span class="line">[&#123;</span><br><span class="line">        <span class="string">&quot;province&quot;</span>: <span class="string">&quot;广东&quot;</span>,</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;深圳&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="string">&quot;province&quot;</span>: <span class="string">&quot;陕西&quot;</span>,</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: <span class="string">&quot;西安&quot;</span></span><br><span class="line">  &#125;]</span><br></pre></td></tr></table></figure><p>上述的相应就很不规范，需要统一响应结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;    </span><br><span class="line"><span class="comment">//响应码，1 代表成功; 0 代表失败    </span></span><br><span class="line"><span class="keyword">private</span> Integer code;    </span><br><span class="line"><span class="comment">//提示信息    </span></span><br><span class="line"><span class="keyword">private</span> String msg;    </span><br><span class="line"><span class="comment">//返回的数据    </span></span><br><span class="line"><span class="keyword">private</span> Object data;     </span><br><span class="line"><span class="comment">//…….</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JWT令牌"><a href="#JWT令牌" class="headerlink" title="JWT令牌"></a>JWT令牌</h1><h2 id="JWT介绍"><a href="#JWT介绍" class="headerlink" title="JWT介绍"></a>JWT介绍</h2><p>JSON Web Token ，定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。</p><p>由于数字签名的存在，这些信息是可靠的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">组成：</span><br><span class="line">第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;type&quot;:&quot;JWT&quot;&#125;</span><br><span class="line"></span><br><span class="line">第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：&#123;&quot;id&quot;:&quot;1&quot;,&quot;username&quot;:&quot;Tom&quot;&#125;</span><br><span class="line"></span><br><span class="line">第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</span><br></pre></td></tr></table></figure><p><a href="https://smms.app/image/Q2gl4RdzqIFBGOa" target="_blank"><img src="https://s2.loli.net/2024/01/20/Q2gl4RdzqIFBGOa.png" alt="JWT1.png"></a></p><p>前两个部分进行base64编码，第三部分是自动生成的</p><h2 id="生成JWT令牌"><a href="#生成JWT令牌" class="headerlink" title="生成JWT令牌"></a>生成JWT令牌</h2><p>引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">&lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;    </span><br><span class="line">&lt;artifactId&gt;jjwt&lt;/artifactId&gt;    </span><br><span class="line">&lt;version&gt;0.9.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>生成JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">genJwt</span><span class="params">()</span>&#123;</span><br><span class="line">Map&lt;String,Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(“id”,<span class="number">1</span>);</span><br><span class="line">    claims.put(“username”,“Tom”);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">    .setClaims(claims) <span class="comment">//自定义内容(载荷)            </span></span><br><span class="line">    .signWith(SignatureAlgorithm.HS256, “itheima”) <span class="comment">//签名算法</span></span><br><span class="line">    .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">12</span>*<span class="number">3600</span>*<span class="number">1000</span>)) <span class="comment">//有效期</span></span><br><span class="line">    .compact();</span><br><span class="line">    System.out.println(jwt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析JWT</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parseJwt</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">    .setSigningKey(“itheima”) <span class="comment">//指定签名秘钥  .parseClaimsJws(“eyJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwiZXhwIjoxNjU5OTk1NTE3LCJ1c2VybmFtZSI6IlRvbSJ9.EUTfeqPkGslekdKBezcWCe7a7xbcIIwB1MXlIccTMwo”) //解析令牌</span></span><br><span class="line">        .getBody();</span><br><span class="line">    System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JWT校验时使用的签名秘钥，必须和生成JWT令牌时使用的秘钥是一样的。</p><h1 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h1><p>定义Filter：定义一个类，实现 Filter 接口（不需要自己定义此接口），并重写其所有方法。</p><p>配置Filter：Filter类上加 @WebFilter 注解，配置拦截资源的路径。</p><p>引导类上加 @ServletComponentScan 开启Servlet组件支持。</p><p>init和destroy方法可以不写，默认自带</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@WebFilter注解表示匹配拦截哪个接口</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//初始化方法, 只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init 初始化方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//拦截到请求之后调用, 调用多次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Demo 拦截到了请求...放行前逻辑&quot;</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Demo 拦截到了请求...放行后逻辑&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//销毁方法, 只调用一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy 销毁方法执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引导类</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span> <span class="comment">//开启了对servlet组件的支持</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TliasWebManagementApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TliasWebManagementApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Filter执行流程"><a href="#Filter执行流程" class="headerlink" title="Filter执行流程"></a>Filter执行流程</h2><p>放行后访问对应资源，资源访问完成后，还会回到Filter中，并且从chain.doFilter()方法之后开始执行</p><h2 id="Filter拦截路径"><a href="#Filter拦截路径" class="headerlink" title="Filter拦截路径"></a>Filter拦截路径</h2><table><thead><tr><th>拦截路径</th><th>urlPatterns值</th><th>含义</th></tr></thead><tbody><tr><td>拦截具体路径</td><td>&#x2F;login</td><td>只有访问 &#x2F;login 路径时，才会被拦截</td></tr><tr><td>目录拦截</td><td>&#x2F;emps&#x2F;*</td><td>访问&#x2F;emps下的所有资源，都会被拦截</td></tr><tr><td>拦截所有</td><td>&#x2F;*</td><td>访问所有资源，都会被拦截</td></tr></tbody></table><h2 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h2><p>介绍：一个web应用中，可以配置多个过滤器，这多个过滤器就形成了一个过滤器链，前面的过滤器执行chain.doFilter()，实际上就是把请求交给下一个过滤器</p><p>顺序：注解配置的Filter，优先级是按照过滤器类名（字符串）的自然排序，也就是字母排序。</p><h1 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h1><p>概念：是一种动态拦截方法调用的机制，类似于过滤器。Spring框架中提供的，用来动态拦截控制器方法的执行。作用：拦截请求，在指定的方法调用前后，根据业务需要执行预先设定的代码。</p><h2 id="拦截器实现"><a href="#拦截器实现" class="headerlink" title="拦截器实现"></a>拦截器实现</h2><p>1.定义拦截器，实现HandlerInterceptor接口，并重写其所有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginCheckInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"><span class="meta">@Override</span> <span class="comment">//目标资源方法运行前运行, 返回true: 放行, 放回false, 不放行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span> <span class="comment">//目标资源方法运行后运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//视图渲染完毕后运行, 最后运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.注册拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//注册拦截器并指定拦截器的拦截路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器拦截路径"><a href="#拦截器拦截路径" class="headerlink" title="拦截器拦截路径"></a>拦截器拦截路径</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginCheckInterceptor loginCheckInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(loginCheckInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addPathPatterns表示拦截哪些资源，excludePathPatterns表示不拦截哪些资源</p><table><thead><tr><th>拦截路径</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>&#x2F;*</td><td>一级路径</td><td>能匹配&#x2F;depts，&#x2F;emps，&#x2F;login，不能匹配 &#x2F;depts&#x2F;1</td></tr><tr><td>&#x2F;**</td><td>任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2</td></tr><tr><td>&#x2F;depts&#x2F;*</td><td>&#x2F;depts下的一级路径</td><td>能匹配&#x2F;depts&#x2F;1，不能匹配&#x2F;depts&#x2F;1&#x2F;2，&#x2F;depts</td></tr><tr><td>&#x2F;depts&#x2F;**</td><td>&#x2F;depts下的任意级路径</td><td>能匹配&#x2F;depts，&#x2F;depts&#x2F;1，&#x2F;depts&#x2F;1&#x2F;2，不能匹配&#x2F;emps&#x2F;1</td></tr></tbody></table><h2 id="拦截器执行流程"><a href="#拦截器执行流程" class="headerlink" title="拦截器执行流程"></a>拦截器执行流程</h2><p><a href="https://smms.app/image/3JgFyWCdPcHBDtN" target="_blank"><img src="https://s2.loli.net/2024/01/20/3JgFyWCdPcHBDtN.png" alt="interceptor2.png"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">过滤器和拦截器的区别：</span><br><span class="line"></span><br><span class="line">接口规范不同：过滤器需要实现Filter接口，而拦截器需要实现HandlerInterceptor接口。</span><br><span class="line"></span><br><span class="line">拦截范围不同：过滤器Filter会拦截所有的资源，而Interceptor只会拦截Spring环境中的资源。</span><br></pre></td></tr></table></figure><h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><h2 id="参数配置化"><a href="#参数配置化" class="headerlink" title="参数配置化"></a>参数配置化</h2><p>application.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">aliyun.oss.endpoint=https://oss-cn-hangzhou.aliyuncs.com</span><br><span class="line">aliyun.oss.accessKeyId=LTAI4GCH1vX6DKqJWxd6nEuW</span><br><span class="line">aliyun.oss.accessKeySecret=yBshYweHOpqDuhCArrVHwIiBKpyqSL</span><br><span class="line">aliyun.oss.bucketName=web-tlias</span><br></pre></td></tr></table></figure><p>@Value 注解通常用于外部配置的属性注入，具体用法为： @Value(“${配置文件中的key}”)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;aliyun.oss.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint ;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.accessKeyId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId ;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.accessKeySecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret ;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName ;</span><br></pre></td></tr></table></figure><h2 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h2><p>springboot配置文件可以是.properties文件，也可以是yml文件或者yaml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//application.properties</span><br><span class="line">server.port=8080</span><br><span class="line">server.address=127.0.0.1</span><br><span class="line"></span><br><span class="line">//application.yml</span><br><span class="line">server:</span><br><span class="line">   port:  8080</span><br><span class="line">   address: 127.0.0.1</span><br><span class="line"></span><br><span class="line">//application.yaml</span><br><span class="line">server:</span><br><span class="line">   port:  8080</span><br><span class="line">   address: 127.0.0.1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yml文件配置规范：</span><br><span class="line">    1.大小写敏感</span><br><span class="line">    2.数值前边必须有空格，作为分隔符</span><br><span class="line">    3.使用缩进表示层级关系，缩进时，不允许使用Tab键，只能用空格（idea中会自动将Tab转换为空格）</span><br><span class="line">    4.缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</span><br><span class="line">    5.# 表示注释，从这个字符一直到行尾，都会被解析器忽略</span><br></pre></td></tr></table></figure><p>yml数据格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//对象/Map集合：</span><br><span class="line">user:</span><br><span class="line">   name: zhangsan</span><br><span class="line">   age: 18</span><br><span class="line">   password: 123456</span><br><span class="line"></span><br><span class="line">//数组/List/Set集合：</span><br><span class="line">hobby:</span><br><span class="line">   - java</span><br><span class="line">   - game</span><br><span class="line">   - sport</span><br></pre></td></tr></table></figure><h2 id="ConfigurationProperties注解"><a href="#ConfigurationProperties注解" class="headerlink" title="@ConfigurationProperties注解"></a>@ConfigurationProperties注解</h2><p>@Value注解只能一个一个的进行外部属性的注入。</p><p>@ConfigurationProperties可以批量的将外部的属性配置注入到bean对象的属性中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSUtils</span> &#123;</span><br><span class="line"><span class="comment">//从容器中获取Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliOSSProperties aliOSSProperties;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@Data自动设置get set方法</span></span><br><span class="line"><span class="comment">@Component将对象装入容器</span></span><br><span class="line"><span class="comment">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)设置属性所在的包及属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line">    <span class="comment">//要求属性名和配置文件的属性名一致</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="maven基础"><a href="#maven基础" class="headerlink" title="maven基础"></a>maven基础</h1><h2 id="What-is-maven"><a href="#What-is-maven" class="headerlink" title="What is maven?"></a>What is maven?</h2><p>管理和构建java项目的工具</p><h2 id="Use-of-maven"><a href="#Use-of-maven" class="headerlink" title="Use of maven"></a>Use of maven</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>避免手动导包的繁琐以及不同jar包的版本配套问题，如果在后期要升级某个包，相关的包都得升级</p><p>在maven工程下，只需要在pom.xml中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="统一项目结构"><a href="#统一项目结构" class="headerlink" title="统一项目结构"></a>统一项目结构</h3><p>不同开发工具（eclipse、IDEA）开发出的java项目结构不一样，而只要使用maven项目结构，生成的工程结构都是一样的</p><p>目录结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─src</span><br><span class="line">    ├─main       （实际项目资源）</span><br><span class="line">    ├─────java    （java源代码目录）</span><br><span class="line">    ├─────resources（配置文件目录）</span><br><span class="line">    ├─test        （测试项目资源）</span><br><span class="line">    ├─────java</span><br><span class="line">    ├─────resources</span><br><span class="line">    └─pom.xml  （项目配置文件）</span><br></pre></td></tr></table></figure><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p>使用maven可以全流程进行编译、测试、打包、发布等过程，减少工作量，编译运行之后会新建一个target目录，存放程序的字节码</p><h2 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a>maven的安装</h2><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><p>1.解压apache-maven-x.x.x-bin.zip</p><p>2.配置本地仓库，修改conf&#x2F;settings.xml中的<code>&lt;loaclRepository&gt;</code>为一个指定目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;loaclRepository&gt;E:/develop/apache-maven-x.x.x/mvn_repo&lt;/loaclRepository&gt;</span><br></pre></td></tr></table></figure><p>3.配置阿里云镜像，修改conf&#x2F;settings.xml中的<code>&lt;mirrors&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>4.配置环境变量，MAVEN_HOME为maven的解压目录，并将其bin目录加入PATH变量</p><h3 id="IDEA集成maven"><a href="#IDEA集成maven" class="headerlink" title="IDEA集成maven"></a>IDEA集成maven</h3><h4 id="配置maven环境（当前工程）"><a href="#配置maven环境（当前工程）" class="headerlink" title="配置maven环境（当前工程）"></a>配置maven环境（当前工程）</h4><p>选择 IDEA中 File –&gt; Settings –&gt; Build,Execution,Deployment –&gt; Build Tools –&gt; Maven</p><p>设置 IDEA 使用本地安装的 Maven，并修改配置文件及本地仓库路径，查看File –&gt; Settings –&gt; Build,Execution,Deployment –&gt; Build Tools –&gt; Maven–&gt;Runner中的Java版本File –&gt; Settings –&gt; Build,Execution,Deployment –&gt;Compiler–&gt; Java Compiler中的Java版本</p><h4 id="配置maven环境（全局）"><a href="#配置maven环境（全局）" class="headerlink" title="配置maven环境（全局）"></a>配置maven环境（全局）</h4><p>点击close Project–&gt;Customize–&gt;All settings，后续同上</p><h2 id="Maven坐标"><a href="#Maven坐标" class="headerlink" title="Maven坐标"></a>Maven坐标</h2><p>新建maven项目时会需要填写项目的GroupId，AircraftId以及Verison，叫maven中的坐标</p><p>Maven 中的坐标是资源的唯一标识，通过该坐标可以唯一定位资源位置。使用坐标来定义项目或引入项目中需要的依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</span><br><span class="line">artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</span><br><span class="line">version：定义当前项目版本号</span><br><span class="line">pom.xml</span><br><span class="line">&lt;groupId&gt;yu1e.com&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mavenTest01&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br></pre></td></tr></table></figure><h2 id="IDEA导入maven项目"><a href="#IDEA导入maven项目" class="headerlink" title="IDEA导入maven项目"></a>IDEA导入maven项目</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可，如果找不到，就在View–&gt;Appearance–&gt;Windows Tool Bars勾上</p><p>删除maven模块，右键选择Remove module</p><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><p>File–&gt;Project Structure–&gt;Project Settings–&gt;Modules–&gt;+–&gt;Import Modules–&gt;选择pom.xml</p><h2 id="依赖管理-1"><a href="#依赖管理-1" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">依赖：指当前项目运行所需要的jar包，一个项目中可以引入多个依赖。</span><br><span class="line">配置：</span><br><span class="line">1.在 pom.xml 中编写 &lt;dependencies&gt; 标签</span><br><span class="line">2.在 &lt;dependencies&gt; 标签中 使用 &lt;dependency&gt; 引入坐标</span><br><span class="line">3.定义坐标的 groupId，artifactId，version</span><br><span class="line">4.点击刷新按钮，引入最新加入的坐标</span><br></pre></td></tr></table></figure><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>说白了就是A依赖B，B依赖C，那么A就依赖C</p><p>如果在A的pom.xml中配置依赖项目B，B的pom.xml中依赖项目C，那么A会自动加载C的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.yu1e&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;projectB&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-projectB&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    </span><br><span class="line">    </span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">   &lt;exclusion&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>依赖的jar包，默认情况下，可以在任何地方使用。可以通过 <code>&lt;scope&gt;…&lt;/ scope &gt;</code> 设置其作用范围。作用范围：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主程序范围有效。（main文件夹范围内）</span><br><span class="line">测试程序范围有效。（test文件夹范围内）</span><br><span class="line">是否参与打包运行，即打包之后生产的文件中有无该依赖。（package指令范围内）</span><br></pre></td></tr></table></figure><table><thead><tr><th>scope值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>这里关注的主要是compile（编译项目源代码）、test（运行测试）、package（将编译后的文件打包成jar、war等）、install（安装项目到本地仓库，如果成功，那么本地仓库的路径下应该会有com.yu1e.test这个jar包）</p><h1 id="MyBatis框架使用"><a href="#MyBatis框架使用" class="headerlink" title="MyBatis框架使用"></a>MyBatis框架使用</h1><h2 id="配置mybatis"><a href="#配置mybatis" class="headerlink" title="配置mybatis"></a>配置mybatis</h2><p>在application.properties进行配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1234</span><br></pre></td></tr></table></figure><p>定义User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">   <span class="comment">//省略 get / set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解SQL语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span><span class="comment">//在运行时，会自动生成该接口的实现类对象(代理对象即Java中的动态代理)，并且将该对象交给IOC容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;    </span><br><span class="line">    <span class="meta">@Select(&quot;select *  from user&quot;)</span>    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行时会自动将执行结果封装到list()方法的返回值中</p><p>mybatis开发中，只需要定义接口不需要实现，mybatis底层会自动实现</p><h2 id="JDBC介绍"><a href="#JDBC介绍" class="headerlink" title="JDBC介绍"></a>JDBC介绍</h2><p>JDBC： ( Java DataBase Connectivity )，就是使用Java语言操作关系型数据库的一套API。</p><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p><p>我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mybatis &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"><span class="comment">//3.获取执行SQL的对象Statement,执行SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> resultSet. getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    <span class="type">short</span> <span class="variable">gender</span> <span class="operator">=</span> resultSet.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">    userList.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.释放资源</span></span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p>硬编码、挨个提取字段非常复杂</p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p><p>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><p>简单说，就是数据库连接池中存放着所有的数据库连接语句，要用哪个取哪个，不用了就还给连接池，这样就不用每次用同一个查询语句的时候都重复建立数据库连接占用资源</p><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>Lombok是一个实用的Java类库，能通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    </span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>比如之前的User类是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String name, Short age, Short gender, String phone)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    <span class="built_in">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Short <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Short age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Short <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Short gender)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.phone = phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">            <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要自己写各种方法</p><p>有了Lombok之后，只需要在类上加上@Data注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Short age;</span><br><span class="line"><span class="keyword">private</span> Short gender;</span><br><span class="line"><span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的 toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和 hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h2 id="XML映射文件"><a href="#XML映射文件" class="headerlink" title="XML映射文件"></a>XML映射文件</h2><p>SQL语句可以注解，也可以通过XML配置文件</p><p>XML配置文件规范</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）。</span><br><span class="line"></span><br><span class="line">XML映射文件的namespace属性为Mapper接口全限定名一致。</span><br><span class="line"></span><br><span class="line">XML映射文件中sql语句的id与Mapper 接口中的方法名一致，并保持返回类型一致。</span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;      </span><br><span class="line"><span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span> <span class="params">(String name, Short gender , LocalDate begin , LocalDate end)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//xml配置文件</span></span><br><span class="line"><span class="comment">//resultType指的是封装的单条记录类型</span></span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;itheima&quot;</span>&gt;    </span><br><span class="line">&lt;select id=<span class="string">&quot;abc&quot;</span> resultType=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span><br><span class="line">    select * from emp where name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span> <span class="type">and</span> <span class="variable">gender</span> <span class="operator">=</span> #&#123;gender&#125; and entrydate between #&#123;begin&#125; and #&#123;end&#125; order by update_time desc</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h1 id="三层开发架构"><a href="#三层开发架构" class="headerlink" title="三层开发架构"></a>三层开发架构</h1><h2 id="三层架构概述"><a href="#三层架构概述" class="headerlink" title="三层架构概述"></a>三层架构概述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">controller：控制层，接收前端发送的请求，对请求进行处理，并响应数据。</span><br><span class="line">service：业务逻辑层，处理具体的业务逻辑。</span><br><span class="line">dao：数据访问层(Data Access Object)（持久层），负责数据访问操作，包括数据的增、删、改、查。</span><br><span class="line">controller接受请求</span><br><span class="line">service调用dao层，dao层获取数据</span><br><span class="line">service层拿到dao层返回的数据交给controller层</span><br><span class="line">controller展示页面</span><br></pre></td></tr></table></figure><h2 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h2><p>简单的三层架构实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//controller层</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码就存在一个问题，如果controller层在调用service层时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br></pre></td></tr></table></figure><p>这里的EmpServiceA()如果要换成EmpServiceB()，就需要改这块的代码，这里就产生了controller层和service层的耦合</p><h2 id="耦合问题的解决"><a href="#耦合问题的解决" class="headerlink" title="耦合问题的解决"></a>耦合问题的解决</h2><p>如果能引入一个容器，这个容器里可以存放EmpServiceA的对象，也可以存放EmpServiceB的对象，当controller层需要EmpService实例的时候，就去容器里取，这样就避免了改代码的情况，说白了就是把对象交给容器管理</p><p>将对象放入容器的过程称为控制反转，从容器取出对象的过程成为依赖注入，容器成为IOC容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">控制反转： Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</span><br><span class="line">依赖注入： Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</span><br><span class="line">Bean对象：IOC容器中创建、管理的对象，称之为bean。</span><br></pre></td></tr></table></figure><h2 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC&amp;DI"></a>IOC&amp;DI</h2><p>修改之后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Service层及Dao层的实现类，交给IOC容器管理。</span><br><span class="line"><span class="number">2.</span>Controller及Service注入运行时，依赖的对象。</span><br><span class="line"><span class="number">3.</span>运行测试。</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"><span class="comment">//Autowired注解表示运行时,需要从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Component注解表示将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"><span class="comment">//Autowired注解表示运行时,需要从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Component表示将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在切换EmpServiceA为EmpServiceB时，只需要将EmpServiceA中的@Component注解注释掉，然后在EmpServiceB中加上@Component</p><h2 id="IOC详解"><a href="#IOC详解" class="headerlink" title="IOC详解"></a>IOC详解</h2><p>IOC容器中的对象又叫Bean对象</p><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th>注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>@Component</td><td>声明bean的基础注解</td><td>不属于以下三类时，用此注解</td></tr><tr><td>@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td>@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td>@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr></tbody></table><p>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Service(value = &quot;test&quot;)</span><br></pre></td></tr></table></figure><p>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</p><p>前面声明bean的四大注解，要想生效，还需要被组件扫描注解@ComponentScan扫描。</p><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了启动类声明注解 @SpringBootApplication 中，默认扫描的范围是启动类所在包及其子包，如果有类不在这个范围内，是无法放到容器中的。</p><h2 id="DI详解"><a href="#DI详解" class="headerlink" title="DI详解"></a>DI详解</h2><p>@Autowired注解，默认是按照类型进行，如果存在多个相同类型的bean，将会报错。</p><p>如果EmpServiceA和EmpServiceB都被放到容器中，那么需要通过以下几种方案来指定注入的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"><span class="meta">@Resource(name = &quot;empServiceB&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;empServiceA&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云服务器搭建我的备份gitblog</title>
      <link href="/2024/03/30/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%A4%87%E4%BB%BDgitblog/"/>
      <url>/2024/03/30/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E5%A4%87%E4%BB%BDgitblog/</url>
      
        <content type="html"><![CDATA[<p>在经历过一次虚拟机down掉然后重装系统，结果虚拟机无法恢复的折腾之后，我的本地笔记又又又丢了，于是打算把blog的环境给放到云上，实现redundancy</p><h1 id="环境搭建及测试"><a href="#环境搭建及测试" class="headerlink" title="环境搭建及测试"></a>环境搭建及测试</h1><p>首先安装git和nodejs环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br><span class="line">yum install -y nodejs</span><br><span class="line">npm install -g cnpm</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>测试，这里的IP是服务器的内网IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -i 172.20.255.46 -p 80</span><br></pre></td></tr></table></figure><p>然后就可以通过公网IP访问了</p><h1 id="安装cactus主题"><a href="#安装cactus主题" class="headerlink" title="安装cactus主题"></a>安装cactus主题</h1><p>进入博客所在目录然后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure><p>然后在.&#x2F;_config.yml中修改theme</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: cactus</span><br></pre></td></tr></table></figure><h2 id="添加about页面"><a href="#添加about页面" class="headerlink" title="添加about页面"></a>添加about页面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>会在根目录的source文件夹下新建about&#x2F;index.md</p><h2 id="在导航栏添加搜索功能"><a href="#在导航栏添加搜索功能" class="headerlink" title="在导航栏添加搜索功能"></a>在导航栏添加搜索功能</h2><p>在.&#x2F;themes&#x2F;cactus&#x2F;_config.yml中找到nav 新建search标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">  search: /search/</span><br></pre></td></tr></table></figure><p>执行npm install hexo-generator-search –save</p><p>执行hexo new page search</p><p>进入.&#x2F;themes&#x2F;cactus&#x2F;source&#x2F;serch&#x2F;index.md，修改md文件的头为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: Search</span><br><span class="line">type: search</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>更新之后进入网站，点击search就可以搜索了</p><h2 id="标签功能"><a href="#标签功能" class="headerlink" title="标签功能"></a>标签功能</h2><p>在主题的配置文件中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">  home: /</span><br><span class="line">  about: /about/</span><br><span class="line">  articles: /archives/</span><br><span class="line">  tags: /tags/</span><br><span class="line">  projects: http://github.com/yu1e</span><br><span class="line">  search: /search/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: Tags and Categories</span><br><span class="line">date: 2017-12-24 23:29:53</span><br><span class="line">tags:</span><br><span class="line">- Foo</span><br><span class="line">- Bar</span><br></pre></td></tr></table></figure><p>然后hexo new page “tags”</p><p>在tags目录下新生成的index.md中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2024-03-31 13:59:52</span><br><span class="line">type: tags</span><br></pre></td></tr></table></figure><h1 id="更新到github"><a href="#更新到github" class="headerlink" title="更新到github"></a>更新到github</h1><p>首先生成密钥和配置用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxx@mail.com&quot;</span><br><span class="line">cat /root/.ssh/id_rsa.pub</span><br><span class="line">git config --global user.name &quot;xxx&quot;</span><br><span class="line">git config --global user.email &quot;xxx&quot;</span><br></pre></td></tr></table></figure><p>然后把公钥内容放到GitHub上，再新建一个仓库，这个就不说了，很简单</p><p>测试连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>然后改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/godweiyang/godweiyang.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
